

# Directory where files will be saved
UPLOAD_FOLDER = '/path/to/save/files'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Allowed file extensions (including CSV)
ALLOWED_EXTENSIONS = {'csv'}

# Function to check allowed file types
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    if file and allowed_file(file.filename):
        filename = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(filename)
        return jsonify({"message": f"File '{file.filename}' uploaded successfully."}), 200

    return jsonify({"error": "Invalid file format. Only .csv files are allowed."}), 400













// #include <WiFiNINA.h>
// #include <RTCZero.h>
// #include <SPI.h>
// #include <SD.h>         // Add the SD card library
// #include <WiFiClient.h> // WiFiClient for HTTP POST requests

// // WiFi credentials
// const char *SSID = "TP-Link_BE10";      // Your Wi-Fi SSID
// const char *PASSWORD = "SensorLab123$"; // Your Wi-Fi password

// // Server details
// const char *SERVER_IP = "192.168.0.69";  // IP address of your Raspberry Pi
// const int SERVER_PORT = 5000;            // Port of your Flask server
// const char *UPLOAD_ENDPOINT = "/upload"; // Flask upload endpoint

// // Function prototypes
// void sampleData();
// void printToSerial();
// void dataToString();
// void saveToSDCard();     // Function to save data to SD card
// void sendFileToServer(); // Function to send data file to the server

// String dataString = "";
// int readResolution = 12;
// int analogPin = A1; // Use A1 for analog pin
// int OutputPin = A5; // Use A5 for digital output pin
// unsigned int sampleAmt = 499;
// unsigned int sampleArray[499];
// const int chipSelect = 4; // SD card chip select pin (adjust depending on your board)
// int fileCounter = 0;      // Counter to create unique filenames

// void connectWiFi()
// {
//   while (WiFi.status() != WL_CONNECTED)
//   {
//     Serial.println("Connecting to WiFi...");
//     WiFi.begin(SSID, PASSWORD);
//     delay(500);
//   }
//   Serial.println("Connected to WiFi!");
// }

// WiFiClient client;

// void setup()
// {
//   Serial.begin(9600);
//   while (!Serial)
//   {
//     ; // Wait for serial port to connect
//   }

//   connectWiFi();

//   // Initialize the SD card
//   if (!SD.begin(chipSelect))
//   {
//     Serial.println("SD card initialization failed!");
//     return;
//   }
//   Serial.println("SD card initialized.");

//   analogReference(AR_INTERNAL);
//   analogReadResolution(readResolution);
//   pinMode(OutputPin, OUTPUT);
// }

// void loop()
// {
//   sampleData();
//   dataToString();
//   printToSerial();
//   saveToSDCard();     // Save the data to the SD card as a .csv file
//   sendFileToServer(); // Send the data file to the server

//   delay(10000); // Delay to avoid spamming the server, adjust as needed
// }

// void sampleData()
// {
//   digitalWrite(OutputPin, HIGH);
//   delay(1000);
//   digitalWrite(OutputPin, LOW);
//   for (int i = 0; i < sampleAmt; i++)
//   {
//     sampleArray[i] = analogRead(analogPin);
//   }
// }

// void printToSerial()
// {
//   for (int j = 0; j < sampleAmt; j++)
//   {
//     float voltage = sampleArray[j] * (3.3 / 1023.0);
//     Serial.println(voltage);
//   }
// }

// void dataToString()
// {
//   dataString = ""; // Clear the previous data
//   // Add the header if necessary (remove this if not needed)
//   dataString += "Voltage,Time(ms)\n";

//   for (int j = 0; j < sampleAmt; j++)
//   {
//     float voltage = sampleArray[j] * (3.3 / 1023.0);
//     // Format the data as CSV: voltage,time
//     dataString += String(voltage) + "," + millis() + "\n";
//   }
// }

// // Function to save the sampled data to the SD card as a .csv file with a unique filename
// void saveToSDCard()
// {
//   // Generate a unique filename using a counter
//   String filename = "data_" + String(fileCounter) + ".csv";
//   fileCounter++; // Increment the counter for the next file

//   // Open the file on the SD card
//   File dataFile = SD.open(filename.c_str(), FILE_WRITE);

//   if (dataFile)
//   {                               // If it opens
//     dataFile.println(dataString); // Write the dataString to the file
//     dataFile.close();             // Close the file
//     Serial.println("Data saved to SD card: " + filename);
//   }
//   else
//   {
//     Serial.println("Error opening " + filename);
//   }
// }

// // Function to send the .csv file to the server
// void sendFileToServer()
// {
//   // Generate the filename again (make sure it matches the one created in saveToSDCard)
//   String filename = "data_" + String(fileCounter - 1) + ".csv"; // Get the last saved file
//   File dataFile = SD.open(filename.c_str());

//   if (!dataFile)
//   {
//     Serial.println("Failed to open file for sending");
//     return;
//   }

//   // Calculate and send the Content-Length header
//   unsigned long contentLength = dataFile.size(); // Get file size
//   Serial.print("File size (Content-Length): ");
//   Serial.println(contentLength);

//   // Create the HTTP request
//   if (client.connect(SERVER_IP, SERVER_PORT))
//   {
//     Serial.println("Connected to server, sending file...");

//     // Send the HTTP POST request headers
//     client.println("POST " + String(UPLOAD_ENDPOINT) + " HTTP/1.1");
//     client.println("Host: " + String(SERVER_IP));
//     client.println("Content-Type: text/csv");
//     client.print("Content-Length: ");
//     client.println(contentLength);
//     client.println("Connection: close");
//     client.println();

//     // Send the file content in small chunks
//     const int bufferSize = 64; // Adjust buffer size based on your memory constraints
//     char buffer[bufferSize];
//     while (dataFile.available())
//     {
//       int bytesRead = dataFile.read(buffer, bufferSize); // Read up to bufferSize bytes
//       client.write(buffer, bytesRead);                   // Send the buffer content to the server
//     }

//     dataFile.close(); // Close the file
//     Serial.println("File content sent");

//     // Wait for the response from the server
//     while (client.connected())
//     {
//       if (client.available())
//       {
//         String response = client.readStringUntil('\n');
//         Serial.println("Server response: " + response);
//       }
//     }

//     client.stop(); // Close the connection
//     delay(1000);   // Wait before the next request
//   }
//   else
//   {
//     Serial.println("Connection to server failed");
//   }
// }

/*--------------------------------------------------------------------------------*/
#include <WiFiNINA.h>
#include <RTCZero.h>
#include <SPI.h>
#include <SD.h>         // Add the SD card library
#include <WiFiClient.h> // WiFiClient for HTTP POST requests

// WiFi credentials
const char *SSID = "TP-Link_BE10";      // Your Wi-Fi SSID
const char *PASSWORD = "SensorLab123$"; // Your Wi-Fi password

// Server details
const char *SERVER_IP = "192.168.0.69";  // IP address of your Raspberry Pi
const int SERVER_PORT = 5000;            // Port of your Flask server
const char *UPLOAD_ENDPOINT = "/upload"; // Flask upload endpoint

// Function prototypes
void sampleData();
void dataToString();
void printToSerial();
void saveToSDCard();     // Function to save data to SD card
void sendFileToServer(); // Function to send data file to the server

String dataString = "";
int readResolution = 12;
int analogPin = A1; // Use A1 for analog pin
int OutputPin = A5; // Use A5 for digital output pin
unsigned int sampleAmt = 499;
unsigned int sampleArray[499];
const int chipSelect = 4; // SD card chip select pin (adjust depending on your board)
int fileCounter = 0;      // Counter to create unique filenames

WiFiServer server(80); // Initialize WiFi server on port 80

void connectWiFi()
{
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("Connecting to WiFi...");
    WiFi.begin(SSID, PASSWORD);
    delay(500);
  }
  Serial.println("Connected to WiFi!");
}

WiFiClient client;

void setup()
{
  Serial.begin(9600);
  while (!Serial)
  {
    ; // Wait for serial port to connect
  }

  connectWiFi();

  // Start the WiFi server
  server.begin();

  // Initialize the SD card
  if (!SD.begin(chipSelect))
  {
    Serial.println("SD card initialization failed!");
    return;
  }
  Serial.println("SD card initialized.");

  analogReference(AR_INTERNAL);
  analogReadResolution(readResolution);
  pinMode(OutputPin, OUTPUT);
}

void loop()
{
  // Check for incoming client connection
  WiFiClient client = server.available();
  if (client)
  {
    Serial.println("Client connected");

    // Read the HTTP request
    String request = client.readStringUntil('\r');
    client.flush();

    // Check for the "GET_DATA" command in the request
    if (request.indexOf("GET_DATA") != -1)
    {
      Serial.println("GET_DATA command received");

      // Execute data sampling, saving, and sending logic
      sampleData();
      dataToString();
      printToSerial();
      saveToSDCard();
      sendFileToServer();

      // Respond to the client
      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: text/plain");
      client.println();
      client.println("Data sampling and upload complete!");
    }
    else
    {
      // Respond with a default message for other requests
      client.println("HTTP/1.1 400 Bad Request");
      client.println("Content-Type: text/plain");
      client.println();
      client.println("Invalid command");
    }

    client.stop(); // Close the connection
    Serial.println("Client disconnected");
  }
}

// Function to sample data
void sampleData()
{
  digitalWrite(OutputPin, HIGH);
  delay(1000);
  digitalWrite(OutputPin, LOW);
  for (int i = 0; i < sampleAmt; i++)
  {
    sampleArray[i] = analogRead(analogPin);
  }
}

// Function to print data to the Serial monitor
void printToSerial()
{
  String line = "";

  for (int i = 0; i < dataString.length(); i++)
  {
    char c = dataString[i]; // Get each character from dataString

    if (c == '\n') // Check if it's a newline character
    {
      Serial.println(line); // Print the current line
      line = "";            // Reset the line for the next line
    }
    else
    {
      line += c; // Add the character to the current line
    }
  }

  // Print any remaining content (if dataString doesn't end with \n)
  if (line.length() > 0)
  {
    Serial.println(line);
  }
}

// Function to convert data to a CSV string
void dataToString()
{

  dataString = "";                   // Clear the previous data
  dataString += "Voltage,Time(s)\n"; // Add header (Time in seconds)

  unsigned long startTime = millis(); // Capture the start time

  for (int j = 0; j < sampleAmt; j++)
  {
    float voltage = sampleArray[j] * (3.3 / 1023.0);
    // Calculate time in seconds relative to the start time
    float timeInMiliSeconds = (millis() - startTime);                          /// 1000.0;
    dataString += String(voltage) + "," + String(timeInMiliSeconds, 3) + "\n"; // Format: voltage, time (3 decimal places)
  }
}

// Function to save the sampled data to the SD card as a .csv file
void saveToSDCard()
{
  String filename = "data_" + String(fileCounter) + ".csv";
  fileCounter++; // Increment the counter for the next file

  File dataFile = SD.open(filename.c_str(), FILE_WRITE);

  if (dataFile)
  {
    dataFile.println(dataString); // Write dataString to the file
    dataFile.close();
    Serial.println("Data saved to SD card: " + filename);
  }
  else
  {
    Serial.println("Error opening " + filename);
  }
}

// Function to send the .csv file to the server
void sendFileToServer()
{
  String filename = "data_" + String(fileCounter - 1) + ".csv"; // Last saved file
  File dataFile = SD.open(filename.c_str());

  if (!dataFile)
  {
    Serial.println("Failed to open file for sending");
    return;
  }

  unsigned long contentLength = dataFile.size(); // Get file size
  Serial.print("File size (Content-Length): ");
  Serial.println(contentLength);

  if (client.connect(SERVER_IP, SERVER_PORT))
  {
    Serial.println("Connected to server, sending file...");

    client.println("POST " + String(UPLOAD_ENDPOINT) + " HTTP/1.1");
    client.println("Host: " + String(SERVER_IP));
    client.println("Content-Type: text/csv");
    client.print("Content-Length: ");
    client.println(contentLength);
    client.println("Connection: close");
    client.println();

    const int bufferSize = 64; // Adjust buffer size based on memory constraints
    char buffer[bufferSize];
    while (dataFile.available())
    {
      int bytesRead = dataFile.read(buffer, bufferSize);
      client.write(buffer, bytesRead);
    }

    dataFile.close();
    Serial.println("File content sent");

    while (client.connected())
    {
      if (client.available())
      {
        String response = client.readStringUntil('\n');
        Serial.println("Server response: " + response);
      }
    }

    client.stop();
    delay(1000);
  }
  else
  {
    Serial.println("Connection to server failed");
  }
}

// 192.168.0.158 (Arduino)
// 192.168.0.69  (Odyssey)
